openapi: 3.0.0
info:
  title: Event Management API
  description: An API developed for our WBD project that serves our project.
  version: 1.0.0
servers:
  - url: http://chomspro.herokuapp.com
    description:  Main (production) Backend server
  - url: http://localhost:3000
    description:  Main (production) Frontend server
tags:
  - name: Event Management System


# -------------------------------------------------------------------------
# BOOKING
# -------------------------------------------------------------------------

paths:
  /booking:
    get:
      summary: Lists all the bookings done till now 
      tags: [Bookings]
      responses:
        "200":
          description: The list of all bookings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookings'
    post:
      summary: Adds a new booking record.
      tags: [Bookings]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bookings'
      responses: 
        '200':
          description: Created
        '400':
          description: Error

  /booking/{bookingID}:
    get:
      summary: Returns information of a booking by ID.
      tags: [Bookings]
      parameters:
        - name: bookingID
          in: path
          required: true
          description: Autogenerated Booking ID by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
        '400':
          description: Record does not exist
        '500':
          description: Error

    delete:
      summary: Deletes a booking by ID.
      tags: [Bookings]
      parameters:
        - name: bookingID
          in: path
          required: true
          description: Autogenerated Booking ID by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: Deleted
        '400':
          description: Record does not exist
        '500':
          description: Error
          
    patch:
      summary: Update a booking information
      tags: [Bookings]
      parameters:
        - name: bookingID
          in: path
          required: true
          description: Autogenerated Booking ID by MongoDB
          schema:
            type : string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bookings'
      responses:
        '200':
          description: Booking Data Updated
          schema:
            $ref: "#/components/schemas/Bookings"
        '400':
          description: Error



# -------------------------------------------------------------------------
# EVENT
# -------------------------------------------------------------------------


  /events:
    get:
      summary: Lists all the events done till now 
      tags: [Events]
      responses:
        "200":
          description: The list of all events.
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Events'
    post:
      summary: Adds a new event record.
      tags: [Events]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Events'
      responses: 
        '200':
          description: Created
        '400':
          description: Error 
  /events/{eventsID}:
    get:
      summary: Returns information of a Event by ID.
      tags: [Events]
      parameters:
        - name: eventsID
          in: path
          required: true
          description: Autogenerated Event ID by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
        '400':
          description: Record does not exist
        '500':
          description: Error

    delete:
      summary: Deletes a event by ID.
      tags: [Events]
      parameters:
        - name: eventsID
          in: path
          required: true
          description: Autogenerated Events ID by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: Deleted
        '400':
          description: Record does not exist
        '500':
          description: Error
          
    patch:
      summary: Update a events information
      tags: [Events]
      parameters:
        - name: eventsID
          in: path
          required: true
          description: Autogenerated Events ID by MongoDB
          schema:
            type : string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Events'
      responses:
        '200':
          description: Booking Data Updated
          schema:
            $ref: "#/components/schemas/Events"
        '400':
          description: Error


# -------------------------------------------------------------------------
# FEED
# -------------------------------------------------------------------------

  /feed:
    get:
      summary: Lists all the Feeds done till now 
      tags: [Feeds]
      responses:
        "200":
          description: The list of all feeds.
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Feeds'  
    post:
      summary: Adds a new Feed record.
      tags: [Feeds]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feeds'
      responses: 
        '200':
          description: Created
        '400':
          description: Error 
  /feed/{feedID}:
    get:
      summary: Returns information of a Feed by ID.
      tags: [Feeds]
      parameters:
        - name: FeedID
          in: path
          required: true
          description: Autogenerated Feed ID by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
        '400':
          description: Record does not exist
        '500':
          description: Error

    delete:
      summary: Deletes a Feed by ID.
      tags: [Feeds]
      parameters:
        - name: FeedID
          in: path
          required: true
          description: Autogenerated Feed ID by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: Deleted
        '400':
          description: Record does not exist
        '500':
          description: Error
          
    patch:
      summary: Update a feed information
      tags: [Feeds]
      parameters:
        - name: FeedID
          in: path
          required: true
          description: Autogenerated Feeds ID by MongoDB
          schema:
            type : string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feeds'
      responses:
        '200':
          description: Feed Data Updated
          schema:
            $ref: "#/components/schemas/Feeds"
        '400':
          description: Error

# -------------------------------------------------------------------------
# FOOD
# -------------------------------------------------------------------------

  /food:
    get:
      summary: Lists all the Food details till now 
      tags: [Food]
      responses:
        "200":
          description: The list of all food.
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Food'
    post:
      summary: Adds a new Food record.
      tags: [Food]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
      responses: 
        '200':
          description: Created
        '400':
          description: Error  
  /food/{foodID}:
    get:
      summary: Returns information of a Food by ID.
      tags: [Food]
      parameters:
        - name: FoodID
          in: path
          required: true
          description: Autogenerated Food ID by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
        '400':
          description: Record does not exist
        '500':
          description: Error

    delete:
      summary: Deletes a Food by ID.
      tags: [Food]
      parameters:
        - name: FoodID
          in: path
          required: true
          description: Autogenerated Food ID by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: Deleted
        '400':
          description: Record does not exist
        '500':
          description: Error
          
    patch:
      summary: Update a food information
      tags: [Food]
      parameters:
        - name: FoodID
          in: path
          required: true
          description: Autogenerated Food ID by MongoDB
          schema:
            type : string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
      responses:
        '200':
          description: Feed Data Updated
          schema:
            $ref: "#/components/schemas/Food"
        '400':
          description: Error


# -------------------------------------------------------------------------
# ORAGANIZER
# -------------------------------------------------------------------------



  /organizers:
    get:
      summary: Lists all the Organizers till now 
      tags: [Organizers]
      responses:
        "200":
          description: The list of all Orgnizers.
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Organizers'
    post:
      summary: Adds a new Organizers record.
      tags: [Organizers]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organizers'
      responses: 
        '200':
          description: Created
        '400':
          description: Error

  /organizers/{organizersID}:
    get:
      summary: Returns information of a orgnizers by ID.
      tags: [Organizers]
      parameters:
        - name: organizersID
          in: path
          required: true
          description: Autogenerated orgnizers ID by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
        '400':
          description: Record does not exist
        '500':
          description: Error

    delete:
      summary: Deletes a orgnizers by ID.
      tags: [Organizers]
      parameters:
        - name: organizersID
          in: path
          required: true
          description: Autogenerated orgnizers ID by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: Deleted
        '400':
          description: Record does not exist
        '500':
          description: Error
          
    patch:
      summary: Update a orgnizers information
      tags: [Organizers]
      parameters:
        - name: organizersID
          in: path
          required: true
          description: Autogenerated orgnizers ID by MongoDB
          schema:
            type : string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organizers'
      responses:
        '200':
          description: Feed Data Updated
          schema:
            $ref: "#/components/schemas/Organizers"
        '400':
          description: Error

# -------------------------------------------------------------------------
# USERS
# -------------------------------------------------------------------------

  /users:
    get:
      summary: Lists all the Users till now 
      tags: [Users]
      responses:
        "200":
          description: The list of all Users.
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Users'
    post:
      summary: Adds a new User record.
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
      responses: 
        '200':
          description: Created
        '400':
          description: Error

  /users/{userID}:
    get:
      summary: Returns information of a User by ID.
      tags: [Users]
      parameters:
        - name: userID
          in: path
          required: true
          description: Autogenerated User ID by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
        '400':
          description: Record does not exist
        '500':
          description: Error

    delete:
      summary: Deletes a User by ID.
      tags: [Users]
      parameters:
        - name: userID
          in: path
          required: true
          description: Autogenerated User ID by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: Deleted
        '400':
          description: Record does not exist
        '500':
          description: Error
          
    patch:
      summary: Update a User information
      tags: [Users]
      parameters:
        - name: userID
          in: path
          required: true
          description: Autogenerated user ID by MongoDB
          schema:
            type : string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        '200':
          description: Feed Data Updated
          schema:
            $ref: "#/components/schemas/Users"
        '400':
          description: Error

# -------------------------------------------------------------------------
# VENUE
# -------------------------------------------------------------------------

  /venue:
    get:
      summary: Lists all the Venues till now 
      tags: [Venues]
      responses:
        "200":
          description: The list of all Venues.
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Venues'   
    post:
      summary: Adds a new Venue record.
      tags: [Venues]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venues'
      responses: 
        '200':
          description: Created
        '400':
          description: Error
  /venue/{venueID}:
    get:
      summary: Returns information of a Venue by ID.
      tags: [Venues]
      parameters:
        - name: venueID
          in: path
          required: true
          description: Autogenerated Venue ID by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
        '400':
          description: Record does not exist
        '500':
          description: Error

    delete:
      summary: Deletes a Venue by ID.
      tags: [Venues]
      parameters:
        - name: venueID
          in: path
          required: true
          description: Autogenerated Venue ID by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: Deleted
        '400':
          description: Record does not exist
        '500':
          description: Error
          
    patch:
      summary: Update a Venue information
      tags: [Venues]
      parameters:
        - name: venueID
          in: path
          required: true
          description: Autogenerated venue ID by MongoDB
          schema:
            type : string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venues'
      responses:
        '200':
          description: Feed Data Updated
          schema:
            $ref: "#/components/schemas/Venues"
        '400':
          description: Error
  


























# -------------------------------------------------------------------------
# SCHEMAS
# -------------------------------------------------------------------------



#-------------------------------------------------------------------
components:
  schemas:
    Bookings:
      type: object
      required:
        - name
        - date
        - day
        - time
        - venues_name
        - silver
        - platinium
        - price
        - total_price
        - banner_image_url
        - grade

      properties:
        id:
          type: string
          description: The auto-generated id of the booking.
        name:
          type: string
          description: The name of the show.
        date:
          type: number
          description: Date of the show
        day:
          type: string
          description: Day of the show
        time:
          type: string
          description: Time of the show
        venues_name:
          type: string
          description: Name of the venue
        silver:
          type: array
          items:
            type: string
          description: Description of silver seats booked
        platinium:
          type: array
          items:
            type: string
          description: Description of platinium seats booked
        price:
          type: number
          description: Price of the seats
        total_price:
          type: number
          description: Total price 
        banner_image_url:
          type: string
          description: URL of the banner image
        grade:
          type: string
          description: Grade of the show  

    Events:
      type: object
      required:
        - name
        - location
        - feedback
        - is_popular
        - duration
        - about
        - genre
        - banner_image_url
        - languages
        - grade
        - rating
        - is_premier
        - release_date
        - cast

      properties:
        id:
          type: string
          description: The auto-generated id of the booking.
        name:
          type: string
          description: The name of the show.
        location:
          type: string
          description: Location of the show
        feedback:
          type: array
          items:
            type: string
          description: Feedback of the show
        is_popular:
          type: boolean
          items:
            type: string
          description: Show is popular or not
        duration:
          type: string
          description: Duration of the show
        about:
          type: string
          description: About of the show
        genre:
          type: array
          items:
            type: string
          description: Genre of the show
        banner_image_url:
          type: string
          description: URL of the banner image
        languages:
          type: string
          description: Language of the show 
        grade:
          type: string
          description: Grade of the show 
        rating:
          type: object
          description: Rating of the show 
        is_premier:
          type: boolean
          items:
            type: string
          description: Show is premier or not
        release_date:
          type: string
          description: Release Date of the show
        cast:
          type: array
          items:
            type: string
          description: Cast of the show
    Feed:
      type: object
      required:
        - name
        - feed

      properties:
        id:
          type: string
          description: The auto-generated id of the Feed.
        name:
          type: string
          description: The name of the show.
        feed:
          type: string
          description: The feedback of the show from the user.
    Food:
      type: object
      required:
        - food_name
        - is_popcorn
        - is_coke
        - is_combo
        - food_tag
        - food_image
        - food_price
        - count
      properties:
        id:
          type: string
          description: The auto-generated id of the Food.
        food_name:
          type: string
          description: The name of the food.
        is_popcorn:
          type: boolean
          items:
            type: string
          description: Food is popcorn or not
        is_coke:
          type: boolean
          items:
            type: string
          description: Food is Coke or not
        is_combo:
          type: boolean
          items:
            type: string
          description: Food is combo pack or not
        food_tag:
          type: string
          description: The tag of the food.
        food_image:
          type: string
          description: URL of the food image
        food_price:
          type: string
          description: The price of the food
        count: 
          type: integer
          description: The count of the food
    Organizer:
      type: object
      required:
        - name
        - about
        - email
        - phone
        - password
        - image
        - organized_events
      properties:
        id:
          type: string
          description: The auto-generated id of the Organizer.
        name:
          type: string
          description: The name of the organizer
        about:
          type: string
          description: The about of the organizer
        email:
          type: string
          description: The email of the organizer
        phone:
          type: string
          description: The phone of the organizer
        password:
          type: string
          description: The password of the organizer
        image:
          type: string
          description: The iamge url of the organizer
        organized_events:
          type: array
          items:
            type: string
          description: The password of the organizer
    User:
      type: object
      required:
        - name
        - about
        - email
        - phone
        - password
        - image
        - friend_interest
        - fav_genres
        - booked_event
        - friends
        - friend_requests
      properties:
        id:
          type: string
          description: The auto-generated id of the User.
        name:
          type: string
          description: The name of the organizer
        about:
          type: string
          description: The about of the organizer
        email:
          type: string
          description: The email of the organizer
        phone:
          type: string
          description: The phone of the organizer
        password:
          type: string
          description: The password of the organizer
        iamge:
          type: string
          description: The iamge url of the organizer
        friend_interest:
          type: boolean
          items:
            type: string
          description: The user has sent friend request or not
        fav_genres:
          type: array
          items:
            type: string
          description: The favourite genres of the user
        booked_event:
          type: array
          items:
            type: string
          description: The booked events of the user
        friends:
          type: array
          items:
            type: string
          description: The friends of the user
        friend_requests:
          type: array
          items:
            type: string
          description: The friends request of the user

        
    Venue:
      type: object
      required:
        - name
        - image
        - sub-region
        - package
        - capacity
        - cancellation_availability
        - timings
      properties:
        id:
          type: string
          description: The auto-generated id of the Venue.
        name:
          type: string
          description: The name of the venue
        iamge:
          type: string
          description: The iamge url of the user
        sub-region:
          type: string
          description: The sub-region of the venue
        package:
          type: integer
          description: The package of the venue
        capacity:
          type: integer
          description: The capacity of the user
        cancellation_availability:
          type: boolean
          items:
            type: string
          description: The cancellation availability at the venue
        timings:
          type: array
          items:
            type: string
          description: The timing of the venue
       
     